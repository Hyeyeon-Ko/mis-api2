stages:
  - docker-build
  - docker-push
  - deploy

variables:
  DOCKER_IMAGE: mis-api
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: unix:///var/run/docker.sock  # 호스트의 Docker 소켓을 사용
  DOCKER_TLS_VERIFY: "0"
  DOCKER_CERT_PATH: ""
  REGISTRY_URL: $REGISTRY_URL  # GitLab Container Registry URL
  REGISTRY_USER: $REGISTRY_USER  # GitLab 사용자 이름
  REGISTRY_PASSWORD: $REGISTRY_PASSWORD  # Access Token
  DEPLOY_USER: root  # 배포할 사용자 이름
  DEPLOY_SERVER: 101.10.1.87  # 배포할 서버 IP 주소

before_script:
  - chmod +x gradlew  # gradlew에 실행 권한 부여
  - export DOCKER_TLS_VERIFY=""  # TLS 검증 비활성화
  - export DOCKER_CERT_PATH=""  # 인증서 경로 설정 해제
  - export DOCKER_HOST=unix:///var/run/docker.sock  # 호스트의 Docker 소켓을 사용
  - echo "DOCKER_TLS_VERIFY=$DOCKER_TLS_VERIFY"
  - echo "DOCKER_CERT_PATH=$DOCKER_CERT_PATH"
  - echo "DOCKER_HOST=$DOCKER_HOST"
  - echo "CI_COMMIT_REF_NAME=$CI_COMMIT_REF_NAME"

docker-build:
  stage: docker-build
  image: docker:stable
  script:
    - echo "Docker build start!!"
    - docker build -t $REGISTRY_URL/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$DOCKER_IMAGE:$CI_COMMIT_REF_NAME .
  tags:
    - mis-runner

docker-push:
  stage: docker-push
  image: docker:stable
  script:
    - echo "Docker push start!!"
    - echo "$REGISTRY_PASSWORD" | docker login -u "$REGISTRY_USER" --password-stdin "$REGISTRY_URL"
    - docker push $REGISTRY_URL/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$DOCKER_IMAGE:$CI_COMMIT_REF_NAME
  tags:
    - mis-runner
  dependencies:
    - docker-build

deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan $DEPLOY_SERVER >> ~/.ssh/known_hosts
  script:
    # - ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $DEPLOY_USER@$DEPLOY_SERVER "docker-compose down && docker-compose pull && docker-compose up -d"
    #- ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $DEPLOY_USER@$DEPLOY_SERVER "
    #    docker login -u "$REGISTRY_USER" --password-stdin "$REGISTRY_URL" && 
    #    docker pull $REGISTRY_URL/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$DOCKER_IMAGE:$CI_COMMIT_REF_NAME && 
    #    docker run -d --name backend $REGISTRY_URL/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$DOCKER_IMAGE:$CI_COMMIT_REF_NAME
    #  "
    - ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $DEPLOY_USER@$DEPLOY_SERVER "
        echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY && 
        docker pull $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$DOCKER_IMAGE:$CI_COMMIT_REF_NAME && 
        docker run -d --name backend $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$DOCKER_IMAGE:$CI_COMMIT_REF_NAME
      "
  tags:
    - mis-runner
  dependencies:
    - docker-push
    