stages:
  - docker-build
  - docker-push
  - test

variables:
  DOCKER_IMAGE: mis-api
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: unix:///var/run/docker.sock  # 호스트의 Docker 소켓을 사용
  DOCKER_TLS_VERIFY: "0"
  DOCKER_CERT_PATH: ""
  REGISTRY_URL: $REGISTRY_URL  # GitLab Container Registry URL
  REGISTRY_USER: $REGISTRY_USER  # GitLab 사용자 이름
  REGISTRY_PASSWORD: $REGISTRY_PASSWORD  # Access Token

before_script:
  - chmod +x gradlew  # gradlew에 실행 권한 부여
  - unset DOCKER_CERT_PATH  # DOCKER_CERT_PATH 변수를 명확히 비활성화
  - export DOCKER_TLS_VERIFY=0
  - export DOCKER_HOST=unix:///var/run/docker.sock  # 호스트의 Docker 소켓을 사용
  - mkdir -p /root/.docker  # Docker 디렉터리 생성
  - echo -n "" > /root/.docker/ca.pem  # 빈 ca.pem 파일 생성
  - echo "DOCKER_TLS_VERIFY=$DOCKER_TLS_VERIFY"
  - echo "DOCKER_CERT_PATH=$DOCKER_CERT_PATH"
  - echo "DOCKER_HOST=$DOCKER_HOST"
  - docker info

docker-build:
  stage: docker-build
  image: docker:stable
  script:
    - echo "Docker build start!!"
    - docker build -t $REGISTRY_URL/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$DOCKER_IMAGE:$CI_COMMIT_REF_NAME .
  tags:
    - mis-runner

docker-push:
  stage: docker-push
  image: docker:stable
  script:
    - echo "Docker push start!"
    - echo "$REGISTRY_PASSWORD" | docker login -u "$REGISTRY_USER" --password-stdin "$REGISTRY_URL"
    - docker push $REGISTRY_URL/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$DOCKER_IMAGE:$CI_COMMIT_REF_NAME
  tags:
    - mis-runner
  dependencies:
    - docker-build

test:
  stage: test
  image: $REGISTRY_URL/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$DOCKER_IMAGE:$CI_COMMIT_REF_NAME
  script:
    - echo "Test start!!"
    - java -jar app.jar
  tags:
    - mis-runner
  dependencies:
    - docker-build